---
apiVersion: external-secrets.io/v1beta1
kind: ClusterExternalSecret
metadata:
  name: wildcard.prod.dc01k8s-apps.sf.priv
spec:
  externalSecretName:  wildcard.prod.dc01k8s-apps.sf.priv
  externalSecretSpec:
    data:
     - secretKey: tls.crt
       remoteRef:
         key: dc01-qa-argocd_repo_secrets/data/tls.certificates
         property: prod.crt
     - secretKey: tls.key
       remoteRef:
         key: dc01-qa-argocd_repo_secrets/data/tls.certificates
         property: prod.key
    secretStoreRef:
      kind: ClusterSecretStore
      name: vault-backend-cluster
    refreshInterval: "0"
    target:
      creationPolicy: Orphan
      name: wildcard.prod.dc01k8s-apps.sf.priv
     # this is how the Kind=Secret will look like
      template:
        type: kubernetes.io/tls
  namespaceSelector:
    matchLabels:
      external-secrets.app.succesfactors.com/env: prod
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterExternalSecret
metadata:
  name: wildcard.qa.dc01k8s-apps.sf.priv
spec:
  externalSecretName:  wildcard.qa.dc01k8s-apps.sf.priv
  externalSecretSpec:
    data:
     - secretKey: tls.crt
       remoteRef:
         key: dc01-qa-argocd_repo_secrets/data/tls.certificates
         property: qa.crt
     - secretKey: tls.key
       remoteRef:
         key: dc01-qa-argocd_repo_secrets/data/tls.certificates
         property: qa.key
    secretStoreRef:
      kind: ClusterSecretStore
      name: vault-backend-cluster
    refreshInterval: "0"
    target:
      creationPolicy: Orphan
      name: wildcard.qa.dc01k8s-apps.sf.priv
     # this is how the Kind=Secret will look like
      template:
        type: kubernetes.io/tls
  namespaceSelector:
    matchLabels:
      external-secrets.app.succesfactors.com/env: qa
---
